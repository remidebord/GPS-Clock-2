<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 12 23:20:02 2020
<BR><P>
<H3>Maximum Stack Usage =        696 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; loop() &rArr; GNSS::update() &rArr; GNSS::parse(unsigned*, unsigned char*, unsigned short) &rArr; __aeabi_dmul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[17]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[27]">CEC_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[14]">DMA1_Channel1_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[15]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[16]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from digital.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from digital.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from digital.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from system_stm32f0xx.o(i.HardFault_Handler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from i2c.o(i.I2C1_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from i2c.o(i.I2C2_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from system_stm32f0xx.o(i.NMI_Handler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from system_stm32f0xx.o(i.PendSV_Handler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[24]">SPI2_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from system_stm32f0xx.o(i.SVC_Handler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from system_stm32f0xx.o(i.SysTick_Handler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f051x8.o(.text)
 <LI><a href="#[1d]">TIM14_IRQHandler</a> from timer.o(i.TIM14_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[1e]">TIM15_IRQHandler</a> from timer.o(i.TIM15_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[1f]">TIM16_IRQHandler</a> from timer.o(i.TIM16_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[20]">TIM17_IRQHandler</a> from timer.o(i.TIM17_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from timer.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[1c]">TIM6_DAC_IRQHandler</a> from timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[13]">TSC_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[25]">USART1_IRQHandler</a> from serial.o(i.USART1_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[26]">USART2_IRQHandler</a> from serial.o(i.USART2_IRQHandler) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f051x8.o(.text) referenced from startup_stm32f051x8.o(RESET)
 <LI><a href="#[31]">clock_init()</a> from clock.o(i._Z10clock_initv) referenced from config.o(.data)
 <LI><a href="#[32]">clock_main()</a> from clock.o(i._Z10clock_mainv) referenced from config.o(.data)
 <LI><a href="#[33]">clock_sub1()</a> from clock.o(i._Z10clock_sub1v) referenced from config.o(.data)
 <LI><a href="#[34]">clock_sub2()</a> from clock.o(i._Z10clock_sub2v) referenced from config.o(.data)
 <LI><a href="#[36]">clock_state()</a> from clock.o(i._Z11clock_statev) referenced from config.o(.data)
 <LI><a href="#[35]">clock_timer()</a> from clock.o(i._Z11clock_timerv) referenced from config.o(.data)
 <LI><a href="#[49]">altitude_init()</a> from altitude.o(i._Z13altitude_initv) referenced from config.o(.data)
 <LI><a href="#[4a]">altitude_main()</a> from altitude.o(i._Z13altitude_mainv) referenced from config.o(.data)
 <LI><a href="#[4b]">altitude_sub1()</a> from altitude.o(i._Z13altitude_sub1v) referenced from config.o(.data)
 <LI><a href="#[4c]">altitude_sub2()</a> from altitude.o(i._Z13altitude_sub2v) referenced from config.o(.data)
 <LI><a href="#[4e]">altitude_state()</a> from altitude.o(i._Z14altitude_statev) referenced from config.o(.data)
 <LI><a href="#[4d]">altitude_timer()</a> from altitude.o(i._Z14altitude_timerv) referenced from config.o(.data)
 <LI><a href="#[2e]">EncoderLeftirqA()</a> from callbacks.o(i._Z15EncoderLeftirqAv) referenced from init.o(i._Z4initv)
 <LI><a href="#[2f]">EncoderLeftirqB()</a> from callbacks.o(i._Z15EncoderLeftirqBv) referenced from init.o(i._Z4initv)
 <LI><a href="#[43]">satellites_init()</a> from satellites.o(i._Z15satellites_initv) referenced from config.o(.data)
 <LI><a href="#[44]">satellites_main()</a> from satellites.o(i._Z15satellites_mainv) referenced from config.o(.data)
 <LI><a href="#[45]">satellites_sub1()</a> from satellites.o(i._Z15satellites_sub1v) referenced from config.o(.data)
 <LI><a href="#[46]">satellites_sub2()</a> from satellites.o(i._Z15satellites_sub2v) referenced from config.o(.data)
 <LI><a href="#[2c]">EncoderRightirqA()</a> from callbacks.o(i._Z16EncoderRightirqAv) referenced from init.o(i._Z4initv)
 <LI><a href="#[2d]">EncoderRightirqB()</a> from callbacks.o(i._Z16EncoderRightirqBv) referenced from init.o(i._Z4initv)
 <LI><a href="#[48]">satellites_state()</a> from satellites.o(i._Z16satellites_statev) referenced from config.o(.data)
 <LI><a href="#[47]">satellites_timer()</a> from satellites.o(i._Z16satellites_timerv) referenced from config.o(.data)
 <LI><a href="#[37]">temperature_init()</a> from temperature.o(i._Z16temperature_initv) referenced from config.o(.data)
 <LI><a href="#[38]">temperature_main()</a> from temperature.o(i._Z16temperature_mainv) referenced from config.o(.data)
 <LI><a href="#[39]">temperature_sub1()</a> from temperature.o(i._Z16temperature_sub1v) referenced from config.o(.data)
 <LI><a href="#[3a]">temperature_sub2()</a> from temperature.o(i._Z16temperature_sub2v) referenced from config.o(.data)
 <LI><a href="#[3c]">temperature_state()</a> from temperature.o(i._Z17temperature_statev) referenced from config.o(.data)
 <LI><a href="#[3b]">temperature_timer()</a> from temperature.o(i._Z17temperature_timerv) referenced from config.o(.data)
 <LI><a href="#[2a]">tickMCU()</a> from callbacks.o(i._Z7tickMCUv) referenced from init.o(i._Z4initv)
 <LI><a href="#[2b]">tickRTC()</a> from callbacks.o(i._Z7tickRTCv) referenced from init.o(i._Z4initv)
 <LI><a href="#[3d]">fix_init()</a> from fix.o(i._Z8fix_initv) referenced from config.o(.data)
 <LI><a href="#[3e]">fix_main()</a> from fix.o(i._Z8fix_mainv) referenced from config.o(.data)
 <LI><a href="#[3f]">fix_sub1()</a> from fix.o(i._Z8fix_sub1v) referenced from config.o(.data)
 <LI><a href="#[40]">fix_sub2()</a> from fix.o(i._Z8fix_sub2v) referenced from config.o(.data)
 <LI><a href="#[42]">fix_state()</a> from fix.o(i._Z9fix_statev) referenced from config.o(.data)
 <LI><a href="#[41]">fix_timer()</a> from fix.o(i._Z9fix_timerv) referenced from config.o(.data)
 <LI><a href="#[4f]">__main</a> from __main.o(!!!main) referenced from startup_stm32f051x8.o(.text)
 <LI><a href="#[30]">__sti___10_Config_cpp_ticker</a> from config.o(i.__sti___10_Config_cpp_ticker) referenced from config.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[53]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[54]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[55]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[fe]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[56]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[58]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ff]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; loop() &rArr; GNSS::update() &rArr; GNSS::parse(unsigned*, unsigned char*, unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[100]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[101]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f051x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[61]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[102]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::update()
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ticker::attach_us(void(*)(), unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::write(unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::update()
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_main()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::update()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::add(SevenSeg*)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::round(int, int)
</UL>

<P><STRONG><a name="[50]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[106]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[65]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[109]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[10a]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10b]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10c]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::offset(float, float)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[6e]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[6d]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::offset(float, float)
</UL>

<P><STRONG><a name="[10d]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[10e]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[10f]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[60]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[110]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, digital.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, digital.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, digital.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, i2c.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::flush()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::put(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, i2c.o(i.I2C2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::flush()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::put(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM15_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM16_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM17_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM17_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_DAC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USART1_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, serial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::put(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART2_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, serial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::put(unsigned char)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f051x8.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>clock_init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clock.o(i._Z10clock_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_init() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>clock_main()</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, clock.o(i._Z10clock_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = clock_main() &rArr; Timezone::offset(float, float) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd(unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::offset(float, float)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::set(Time*)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::get(Time*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::time(Time*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::fix()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::clear()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::blink(unsigned char, unsigned)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::set(unsigned char*, unsigned)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::get()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::attach(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>clock_sub1()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, clock.o(i._Z10clock_sub1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_sub1() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::blink(unsigned char, unsigned)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::attach(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>clock_sub2()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clock.o(i._Z10clock_sub2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clock_sub2() &rArr; SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>clock_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i._Z11clock_statev))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>clock_timer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(i._Z11clock_timerv))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>altitude_init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, altitude.o(i._Z13altitude_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = altitude_init() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>altitude_main()</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, altitude.o(i._Z13altitude_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = altitude_main() &rArr; SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd(unsigned char)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::altitude()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::set(unsigned char*, unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>altitude_sub1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, altitude.o(i._Z13altitude_sub1v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>altitude_sub2()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, altitude.o(i._Z13altitude_sub2v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>altitude_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, altitude.o(i._Z14altitude_statev))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>altitude_timer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, altitude.o(i._Z14altitude_timerv))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>EncoderLeftirqA()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, callbacks.o(i._Z15EncoderLeftirqAv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncoderLeftirqA() &rArr; Encoder::irq()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z4initv)
</UL>
<P><STRONG><a name="[2f]"></a>EncoderLeftirqB()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, callbacks.o(i._Z15EncoderLeftirqBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncoderLeftirqB() &rArr; Encoder::irq()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z4initv)
</UL>
<P><STRONG><a name="[43]"></a>satellites_init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, satellites.o(i._Z15satellites_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = satellites_init() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>satellites_main()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, satellites.o(i._Z15satellites_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = satellites_main() &rArr; SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::satellites()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>satellites_sub1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, satellites.o(i._Z15satellites_sub1v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>satellites_sub2()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, satellites.o(i._Z15satellites_sub2v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>EncoderRightirqA()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, callbacks.o(i._Z16EncoderRightirqAv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncoderRightirqA() &rArr; Encoder::irq()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z4initv)
</UL>
<P><STRONG><a name="[2d]"></a>EncoderRightirqB()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, callbacks.o(i._Z16EncoderRightirqBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EncoderRightirqB() &rArr; Encoder::irq()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z4initv)
</UL>
<P><STRONG><a name="[48]"></a>satellites_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, satellites.o(i._Z16satellites_statev))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>satellites_timer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, satellites.o(i._Z16satellites_timerv))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>temperature_init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, temperature.o(i._Z16temperature_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = temperature_init() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>temperature_main()</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, temperature.o(i._Z16temperature_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = temperature_main() &rArr; SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd(unsigned char)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::set(unsigned char*, unsigned)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::temperature()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>temperature_sub1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, temperature.o(i._Z16temperature_sub1v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>temperature_sub2()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, temperature.o(i._Z16temperature_sub2v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>temperature_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, temperature.o(i._Z17temperature_statev))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>temperature_timer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, temperature.o(i._Z17temperature_timerv))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>init()</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, init.o(i._Z4initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init() &rArr; Ticker::attach_us(void(*)(), unsigned) &rArr; Timer::attach(void(*)()) &rArr; NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ticker::attach_us(void(*)(), unsigned)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptIn::risefall(void(*)())
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::circular(unsigned char)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::attach(unsigned char*, unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::current(Item**)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::insert(Item*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::add(SevenSeg*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::value()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::set(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>loop()</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, loop.o(i._Z4loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = loop() &rArr; GNSS::update() &rArr; GNSS::parse(unsigned*, unsigned char*, unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::update()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::update()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::update()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::get()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::previous()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::next()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::update()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::set()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::current(Item**)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>bcd2bin(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common.o(i._Z7bcd2binh))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::update()
</UL>

<P><STRONG><a name="[86]"></a>bin2bcd(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, common.o(i._Z7bin2bcdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bin2bcd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::set(Time*)
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_main()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellites_main()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_main()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[2a]"></a>tickMCU()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, callbacks.o(i._Z7tickMCUv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tickMCU() &rArr; SevenSegGroup::update() &rArr; SevenSeg::set(unsigned char) &rArr; SevenSeg::segments(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::timer()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::timer()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::update()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::timer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z4initv)
</UL>
<P><STRONG><a name="[2b]"></a>tickRTC()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, callbacks.o(i._Z7tickRTCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tickRTC() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::read()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::irq()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i._Z4initv)
</UL>
<P><STRONG><a name="[3d]"></a>fix_init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fix.o(i._Z8fix_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fix_init() &rArr; DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>fix_main()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fix.o(i._Z8fix_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fix_main() &rArr; SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::fix()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>fix_sub1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fix.o(i._Z8fix_sub1v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>fix_sub2()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fix.o(i._Z8fix_sub2v))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>fix_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fix.o(i._Z9fix_statev))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>fix_timer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fix.o(i._Z9fix_timerv))
<BR>[Address Reference Count : 1]<UL><LI> config.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>Brightness::set(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, brightness.o(i._ZN10Brightness3setEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Brightness::set(unsigned char) &rArr; PwmOut::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::Brightness(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[9c]"></a>Brightness::set()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, brightness.o(i._ZN10Brightness3setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Brightness::set() &rArr; PwmOut::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[90]"></a>Brightness::value()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, brightness.o(i._ZN10Brightness5valueEv))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[a4]"></a>Brightness::Brightness(PinName, unsigned, TIM_TypeDef*, TimerChannel)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, brightness.o(i._ZN10BrightnessC1E7PinNamejP11TIM_TypeDef12TimerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Brightness::Brightness(PinName, unsigned, TIM_TypeDef*, TimerChannel) &rArr; PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::set(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[113]"></a>Brightness::Brightness__sub_object(PinName, unsigned, TIM_TypeDef*, TimerChannel)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, brightness.o(i._ZN10BrightnessC1E7PinNamejP11TIM_TypeDef12TimerChannel), UNUSED)

<P><STRONG><a name="[a6]"></a>DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, digital.o(i._ZN10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DigitalOut::DigitalOut(PinName) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::write(unsigned)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::type(PinType)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::pull(PinPull)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(PinName)
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[114]"></a>DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, digital.o(i._ZN10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[7b]"></a>DigitalOut::operator =(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, digital.o(i._ZN10DigitalOutaSEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DigitalOut::operator =(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::write(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_init()
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_init()
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellites_init()
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_init()
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sub1()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickRTC()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[8e]"></a>InterruptIn::risefall(void(*)())</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, digital.o(i._ZN11InterruptIn8risefallEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[ab]"></a>InterruptIn::InterruptIn(PinName)</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, digital.o(i._ZN11InterruptInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InterruptIn::InterruptIn(PinName) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::pull(PinPull)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[115]"></a>InterruptIn::InterruptIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, digital.o(i._ZN11InterruptInC1E7PinName), UNUSED)

<P><STRONG><a name="[8f]"></a>SevenSegGroup::add(SevenSeg*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sevenseg.o(i._ZN13SevenSegGroup3addEP8SevenSeg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SevenSegGroup::add(SevenSeg*) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[7c]"></a>SevenSegGroup::set(unsigned char*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sevenseg.o(i._ZN13SevenSegGroup3setEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SevenSegGroup::set(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_main()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_main()
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellites_main()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_main()
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sub2()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[81]"></a>SevenSegGroup::blink(unsigned char, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sevenseg.o(i._ZN13SevenSegGroup5blinkEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SevenSegGroup::blink(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sub1()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[80]"></a>SevenSegGroup::clear()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sevenseg.o(i._ZN13SevenSegGroup5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[9d]"></a>SevenSegGroup::timer()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sevenseg.o(i._ZN13SevenSegGroup5timerEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickMCU()
</UL>

<P><STRONG><a name="[a0]"></a>SevenSegGroup::update()</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, sevenseg.o(i._ZN13SevenSegGroup6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SevenSegGroup::update() &rArr; SevenSeg::set(unsigned char) &rArr; SevenSeg::segments(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::segments(unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::set(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::off()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::on()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickMCU()
</UL>

<P><STRONG><a name="[d6]"></a>SevenSegGroup::SevenSegGroup()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sevenseg.o(i._ZN13SevenSegGroupC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[116]"></a>SevenSegGroup::SevenSegGroup__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sevenseg.o(i._ZN13SevenSegGroupC1Ev), UNUSED)

<P><STRONG><a name="[75]"></a>CircularBuffer::get()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, circularbuffer.o(i._ZN14CircularBuffer3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::read(unsigned char*)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::read(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>CircularBuffer::put(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, circularbuffer.o(i._ZN14CircularBuffer3putEh))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>CircularBuffer::count()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, circularbuffer.o(i._ZN14CircularBuffer5countEv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::read(unsigned char*)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::read(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>CircularBuffer::flush()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, circularbuffer.o(i._ZN14CircularBuffer5flushEv))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>CircularBuffer::CircularBuffer(unsigned char*, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, circularbuffer.o(i._ZN14CircularBufferC1EPht))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>

<P><STRONG><a name="[117]"></a>CircularBuffer::CircularBuffer__sub_object(unsigned char*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, circularbuffer.o(i._ZN14CircularBufferC1EPht), UNUSED)

<P><STRONG><a name="[b2]"></a>I2C::busy()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(i._ZN3I2C4busyEv))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::read(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>I2C::read(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, i2c.o(i._ZN3I2C4readEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C::read(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::get()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::busy()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::update()
</UL>

<P><STRONG><a name="[b3]"></a>I2C::write(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, i2c.o(i._ZN3I2C5writeEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C::write(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::put(unsigned char)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::busy()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::update()
</UL>

<P><STRONG><a name="[b4]"></a>I2C::I2C(I2C_TypeDef*, PinName, PinName)</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, i2c.o(i._ZN3I2CC1EP11I2C_TypeDef7PinNameS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C::I2C(I2C_TypeDef*, PinName, PinName) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::type(PinType)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::pull(PinPull)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::af(PinAF)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::CircularBuffer(unsigned char*, unsigned short)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[118]"></a>I2C::I2C__sub_object(I2C_TypeDef*, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, i2c.o(i._ZN3I2CC1EP11I2C_TypeDef7PinNameS2_), UNUSED)

<P><STRONG><a name="[8a]"></a>GNSS::satellites()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(i._ZN4GNSS10satellitesEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;satellites_main()
</UL>

<P><STRONG><a name="[83]"></a>GNSS::fix()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(i._ZN4GNSS3fixEv))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_main()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[84]"></a>GNSS::time(Time*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gps.o(i._ZN4GNSS4timeEP4Time))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[b8]"></a>GNSS::parse(unsigned*, unsigned char*, unsigned short)</STRONG> (Thumb, 798 bytes, Stack size 88 bytes, gps.o(i._ZN4GNSS5parseEPjPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GNSS::parse(unsigned*, unsigned char*, unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::update()
</UL>

<P><STRONG><a name="[98]"></a>GNSS::update()</STRONG> (Thumb, 198 bytes, Stack size 544 bytes, gps.o(i._ZN4GNSS6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GNSS::update() &rArr; GNSS::parse(unsigned*, unsigned char*, unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::read(unsigned char*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[87]"></a>GNSS::altitude()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gps.o(i._ZN4GNSS8altitudeEv))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;altitude_main()
</UL>

<P><STRONG><a name="[d7]"></a>GNSS::GNSS(Serial*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gps.o(i._ZN4GNSSC1EP6Serial))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[119]"></a>GNSS::GNSS__sub_object(Serial*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gps.o(i._ZN4GNSSC1EP6Serial), UNUSED)

<P><STRONG><a name="[b6]"></a>GPIO::af(PinAF)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(i._ZN4GPIO2afE5PinAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO::af(PinAF)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::pin(GPIO*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>

<P><STRONG><a name="[c4]"></a>GPIO::mode(PinMode)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(i._ZN4GPIO4modeE7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::mode(PinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
</UL>

<P><STRONG><a name="[cb]"></a>GPIO::port()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i._ZN4GPIO4portEv))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::pin(GPIO*)
</UL>

<P><STRONG><a name="[a9]"></a>GPIO::pull(PinPull)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(i._ZN4GPIO4pullE7PinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::pull(PinPull)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::pin(GPIO*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptIn::InterruptIn(PinName)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::DigitalOut(PinName)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(InterruptIn*, InterruptIn*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>

<P><STRONG><a name="[a2]"></a>GPIO::read()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(i._ZN4GPIO4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::irq()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::irq()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(InterruptIn*, InterruptIn*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::update()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickRTC()
</UL>

<P><STRONG><a name="[a8]"></a>GPIO::type(PinType)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(i._ZN4GPIO4typeE7PinType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::type(PinType)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::pin(GPIO*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::DigitalOut(PinName)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::SevenSeg(DigitalOut*, DigitalOut*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>

<P><STRONG><a name="[c3]"></a>GPIO::clock(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gpio.o(i._ZN4GPIO5clockEj))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
</UL>

<P><STRONG><a name="[aa]"></a>GPIO::write(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i._ZN4GPIO5writeEj))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::operator =(unsigned)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::DigitalOut(PinName)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::segments(unsigned char)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::off()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::on()
</UL>

<P><STRONG><a name="[a7]"></a>GPIO::GPIO(PinName, PinMode)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gpio.o(i._ZN4GPIOC1E7PinName7PinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::clock(unsigned)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::mode(PinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptIn::InterruptIn(PinName)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::DigitalOut(PinName)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>

<P><STRONG><a name="[11a]"></a>GPIO::GPIO__sub_object(PinName, PinMode)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, gpio.o(i._ZN4GPIOC1E7PinName7PinMode), UNUSED)

<P><STRONG><a name="[9a]"></a>Menu::next()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu_1.o(i._ZN4Menu4nextEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Menu::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[92]"></a>Menu::insert(Item*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu_1.o(i._ZN4Menu6insertEP4Item))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[93]"></a>Menu::current(Item**)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu_1.o(i._ZN4Menu7currentEPP4Item))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[9b]"></a>Menu::previous()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu_1.o(i._ZN4Menu8previousEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Menu::previous()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[da]"></a>Menu::Menu()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_1.o(i._ZN4MenuC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[11b]"></a>Menu::Menu__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, menu_1.o(i._ZN4MenuC1Ev), UNUSED)

<P><STRONG><a name="[ce]"></a>Timer::start()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer5startEv))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ticker::attach_us(void(*)(), unsigned)
</UL>

<P><STRONG><a name="[c5]"></a>Timer::attach(void(*)())</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, timer.o(i._ZN5Timer6attachEPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer::attach(void(*)()) &rArr; NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ticker::attach_us(void(*)(), unsigned)
</UL>

<P><STRONG><a name="[c7]"></a>Timer::Timer(TIM_TypeDef*)</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer::Timer(TIM_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ticker::Ticker(TIM_TypeDef*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
</UL>

<P><STRONG><a name="[11c]"></a>Timer::Timer__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[7e]"></a>Button::get()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button.o(i._ZN6Button3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[9f]"></a>Button::timer()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, button.o(i._ZN6Button5timerEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickMCU()
</UL>

<P><STRONG><a name="[97]"></a>Button::update()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, button.o(i._ZN6Button6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Button::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[c8]"></a>Button::Button(PinName)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, button.o(i._ZN6ButtonC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Button::Button(PinName) &rArr; DigitalOut::DigitalOut(PinName) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::DigitalOut(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[11d]"></a>Button::Button__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, button.o(i._ZN6ButtonC1E7PinName), UNUSED)

<P><STRONG><a name="[8b]"></a>DS3231::temperature()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ds3231.o(i._ZN6DS323111temperatureEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temperature_main()
</UL>

<P><STRONG><a name="[7d]"></a>DS3231::get(Time*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ds3231.o(i._ZN6DS32313getEP4Time))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[a1]"></a>DS3231::irq()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ds3231.o(i._ZN6DS32313irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DS3231::irq()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickRTC()
</UL>

<P><STRONG><a name="[82]"></a>DS3231::set(Time*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ds3231.o(i._ZN6DS32313setEP4Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DS3231::set(Time*) &rArr; bin2bcd(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[9e]"></a>DS3231::timer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ds3231.o(i._ZN6DS32315timerEv))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickMCU()
</UL>

<P><STRONG><a name="[99]"></a>DS3231::update()</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, ds3231.o(i._ZN6DS32316updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DS3231::update() &rArr; I2C::write(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2bin(unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::write(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::read(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[d8]"></a>DS3231::DS3231(I2C*, InterruptIn*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ds3231.o(i._ZN6DS3231C1EP3I2CP11InterruptIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DS3231::DS3231(I2C*, InterruptIn*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[11e]"></a>DS3231::DS3231__sub_object(I2C*, InterruptIn*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, ds3231.o(i._ZN6DS3231C1EP3I2CP11InterruptIn), UNUSED)

<P><STRONG><a name="[a3]"></a>PwmOut::write(unsigned char)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timer.o(i._ZN6PwmOut5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmOut::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::set()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::set(unsigned char)
</UL>

<P><STRONG><a name="[a5]"></a>PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel)</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, timer.o(i._ZN6PwmOutC1E7PinNamejP11TIM_TypeDef12TimerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmOut::write(unsigned char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::type(PinType)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::pull(PinPull)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::af(PinAF)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::Brightness(PinName, unsigned, TIM_TypeDef*, TimerChannel)
</UL>

<P><STRONG><a name="[11f]"></a>PwmOut::PwmOut__sub_object(PinName, unsigned, TIM_TypeDef*, TimerChannel)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, timer.o(i._ZN6PwmOutC1E7PinNamejP11TIM_TypeDef12TimerChannel), UNUSED)

<P><STRONG><a name="[ca]"></a>Serial::pin(GPIO*)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, serial.o(i._ZN6Serial3pinEP4GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Serial::pin(GPIO*) &rArr; GPIO::af(PinAF)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::type(PinType)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::pull(PinPull)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::port()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::af(PinAF)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[c2]"></a>Serial::read(unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, serial.o(i._ZN6Serial4readEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Serial::read(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::count()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::update()
</UL>

<P><STRONG><a name="[cc]"></a>Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, serial.o(i._ZN6SerialC1EP13USART_TypeDef7PinNameS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Serial::Serial(USART_TypeDef*, PinName, PinName, PinName) &rArr; Serial::pin(GPIO*) &rArr; GPIO::af(PinAF)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::pin(GPIO*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(PinName, PinMode)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularBuffer::CircularBuffer(unsigned char*, unsigned short)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[120]"></a>Serial::Serial__sub_object(USART_TypeDef*, PinName, PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, serial.o(i._ZN6SerialC1EP13USART_TypeDef7PinNameS2_S2_), UNUSED)

<P><STRONG><a name="[8d]"></a>Ticker::attach_us(void(*)(), unsigned)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(i._ZN6Ticker9attach_usEPFvvEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ticker::attach_us(void(*)(), unsigned) &rArr; Timer::attach(void(*)()) &rArr; NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::attach(void(*)())
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::start()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[cf]"></a>Ticker::Ticker(TIM_TypeDef*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timer.o(i._ZN6TickerC1EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ticker::Ticker(TIM_TypeDef*) &rArr; Timer::Timer(TIM_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[121]"></a>Ticker::Ticker__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timer.o(i._ZN6TickerC1EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[d0]"></a>Encoder::get()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, encoder.o(i._ZN7Encoder3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Encoder::get() &rArr; Encoder::round(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::round(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::update()
</UL>

<P><STRONG><a name="[89]"></a>Encoder::irq()</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, encoder.o(i._ZN7Encoder3irqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encoder::irq()
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderRightirqB()
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderRightirqA()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderLeftirqB()
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderLeftirqA()
</UL>

<P><STRONG><a name="[d1]"></a>Encoder::round(int, int)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, encoder.o(i._ZN7Encoder5roundEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::round(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::get()
</UL>

<P><STRONG><a name="[7f]"></a>Encoder::attach(unsigned char*, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder6attachEPhh))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_sub1()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[96]"></a>Encoder::update()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, encoder.o(i._ZN7Encoder6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Encoder::update() &rArr; Encoder::get() &rArr; Encoder::round(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
</UL>

<P><STRONG><a name="[91]"></a>Encoder::circular(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder8circularEh))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>

<P><STRONG><a name="[d2]"></a>Encoder::Encoder(InterruptIn*, InterruptIn*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, encoder.o(i._ZN7EncoderC1EP11InterruptInS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Encoder(InterruptIn*, InterruptIn*) &rArr; GPIO::pull(PinPull)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::read()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::pull(PinPull)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[122]"></a>Encoder::Encoder__sub_object(InterruptIn*, InterruptIn*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, encoder.o(i._ZN7EncoderC1EP11InterruptInS1_), UNUSED)

<P><STRONG><a name="[af]"></a>SevenSeg::on()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sevenseg.o(i._ZN8SevenSeg2onEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SevenSeg::on()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::write(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::update()
</UL>

<P><STRONG><a name="[b0]"></a>SevenSeg::off()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sevenseg.o(i._ZN8SevenSeg3offEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SevenSeg::off()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::write(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::update()
</UL>

<P><STRONG><a name="[ae]"></a>SevenSeg::set(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sevenseg.o(i._ZN8SevenSeg3setEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SevenSeg::set(unsigned char) &rArr; SevenSeg::segments(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::segments(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::update()
</UL>

<P><STRONG><a name="[ad]"></a>SevenSeg::segments(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sevenseg.o(i._ZN8SevenSeg8segmentsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SevenSeg::segments(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::write(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::update()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::set(unsigned char)
</UL>

<P><STRONG><a name="[d3]"></a>SevenSeg::SevenSeg(DigitalOut*, DigitalOut*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sevenseg.o(i._ZN8SevenSegC1EP10DigitalOutS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SevenSeg::SevenSeg(DigitalOut*, DigitalOut*) &rArr; GPIO::type(PinType)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::type(PinType)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[123]"></a>SevenSeg::SevenSeg__sub_object(DigitalOut*, DigitalOut*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, sevenseg.o(i._ZN8SevenSegC1EP10DigitalOutS1_), UNUSED)

<P><STRONG><a name="[85]"></a>Timezone::offset(float, float)</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, timezone.o(i._ZN8Timezone6offsetEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Timezone::offset(float, float) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_main()
</UL>

<P><STRONG><a name="[d9]"></a>Timezone::Timezone()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timezone.o(i._ZN8TimezoneC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Config_cpp_ticker
</UL>

<P><STRONG><a name="[124]"></a>Timezone::Timezone__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, timezone.o(i._ZN8TimezoneC1Ev), UNUSED)

<P><STRONG><a name="[b9]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ds3231.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::update()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[57]"></a>__user_setup_stackheap</STRONG> (Thumb, 28 bytes, Stack size 36 bytes, sys.o(i.__user_setup_stackheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = main &rArr; loop() &rArr; GNSS::update() &rArr; GNSS::parse(unsigned*, unsigned char*, unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::offset(float, float)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[db]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::offset(float, float)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::parse(unsigned*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[125]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::offset(float, float)
</UL>

<P><STRONG><a name="[dd]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>SetSysClock()</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, system_stm32f0xx.o(i._Z11SetSysClockv))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i._Z16NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ac]"></a>NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, digital.o(i._Z16NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptIn::InterruptIn(PinName)
</UL>

<P><STRONG><a name="[c6]"></a>NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, timer.o(i._Z16NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::attach(void(*)())
</UL>

<P><STRONG><a name="[cd]"></a>NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, serial.o(i._Z16NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)
</UL>

<P><STRONG><a name="[b7]"></a>NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(i._Z16NVIC_SetPriority4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>

<P><STRONG><a name="[30]"></a>__sti___10_Config_cpp_ticker</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, config.o(i.__sti___10_Config_cpp_ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __sti___10_Config_cpp_ticker &rArr; Brightness::Brightness(PinName, unsigned, TIM_TypeDef*, TimerChannel) &rArr; PwmOut::PwmOut(PinName, unsigned, TIM_TypeDef*, TimerChannel) &rArr; GPIO::GPIO(PinName, PinMode) &rArr; GPIO::mode(PinMode)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial::Serial(USART_TypeDef*, PinName, PinName, PinName)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ticker::Ticker(TIM_TypeDef*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterruptIn::InterruptIn(PinName)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalOut::DigitalOut(PinName)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timezone::Timezone()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSeg::SevenSeg(DigitalOut*, DigitalOut*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(InterruptIn*, InterruptIn*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231::DS3231(I2C*, InterruptIn*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button::Button(PinName)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu::Menu()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GNSS::GNSS(Serial*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegGroup::SevenSegGroup()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brightness::Brightness(PinName, unsigned, TIM_TypeDef*, TimerChannel)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C::I2C(I2C_TypeDef*, PinName, PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> config.o(.init_array)
</UL>
<P><STRONG><a name="[67]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[66]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[de]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[dc]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[72]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
